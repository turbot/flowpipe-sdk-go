/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ExecutionExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionExecution{}

// ExecutionExecution struct for ExecutionExecution
type ExecutionExecution struct {
	// Unique identifier for this execution.
	Id *string `json:"id,omitempty"`
	// Pipelines triggered by the execution. Even if the pipelines are nested, we maintain a flat list of all pipelines for easy lookup and querying.
	PipelineExecutions *map[string]ExecutionPipelineExecution `json:"pipeline_executions,omitempty"`
}
func (o ExecutionExecution) GetResourceType() string {
	return "ExecutionExecution"
}
// NewExecutionExecution instantiates a new ExecutionExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionExecution() *ExecutionExecution {
	this := ExecutionExecution{}
	return &this
}

// NewExecutionExecutionWithDefaults instantiates a new ExecutionExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionExecutionWithDefaults() *ExecutionExecution {
	this := ExecutionExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionExecution) SetId(v string) {
	o.Id = &v
}

// GetPipelineExecutions returns the PipelineExecutions field value if set, zero value otherwise.
func (o *ExecutionExecution) GetPipelineExecutions() map[string]ExecutionPipelineExecution {
	if o == nil || IsNil(o.PipelineExecutions) {
		var ret map[string]ExecutionPipelineExecution
		return ret
	}
	return *o.PipelineExecutions
}

// GetPipelineExecutionsOk returns a tuple with the PipelineExecutions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionExecution) GetPipelineExecutionsOk() (*map[string]ExecutionPipelineExecution, bool) {
	if o == nil || IsNil(o.PipelineExecutions) {
		return nil, false
	}
	return o.PipelineExecutions, true
}

// HasPipelineExecutions returns a boolean if a field has been set.
func (o *ExecutionExecution) HasPipelineExecutions() bool {
	if o != nil && !IsNil(o.PipelineExecutions) {
		return true
	}

	return false
}

// SetPipelineExecutions gets a reference to the given map[string]ExecutionPipelineExecution and assigns it to the PipelineExecutions field.
func (o *ExecutionExecution) SetPipelineExecutions(v map[string]ExecutionPipelineExecution) {
	o.PipelineExecutions = &v
}

func (o ExecutionExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.PipelineExecutions) {
		toSerialize["pipeline_executions"] = o.PipelineExecutions
	}
	return toSerialize, nil
}

type NullableExecutionExecution struct {
	value *ExecutionExecution
	isSet bool
}

func (v NullableExecutionExecution) Get() *ExecutionExecution {
	return v.value
}

func (v *NullableExecutionExecution) Set(val *ExecutionExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionExecution(val *ExecutionExecution) *NullableExecutionExecution {
	return &NullableExecutionExecution{value: val, isSet: true}
}

func (v NullableExecutionExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


