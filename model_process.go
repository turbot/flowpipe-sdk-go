/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the Process type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Process{}

// Process struct for Process
type Process struct {
	ProcessId *string `json:"process_id,omitempty"`
}
func (o Process) GetResourceType() string {
	return "Process"
}
// NewProcess instantiates a new Process object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcess() *Process {
	this := Process{}
	return &this
}

// NewProcessWithDefaults instantiates a new Process object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessWithDefaults() *Process {
	this := Process{}
	return &this
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *Process) GetProcessId() string {
	if o == nil || IsNil(o.ProcessId) {
		var ret string
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Process) GetProcessIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *Process) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given string and assigns it to the ProcessId field.
func (o *Process) SetProcessId(v string) {
	o.ProcessId = &v
}

func (o Process) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Process) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProcessId) {
		toSerialize["process_id"] = o.ProcessId
	}
	return toSerialize, nil
}

type NullableProcess struct {
	value *Process
	isSet bool
}

func (v NullableProcess) Get() *Process {
	return v.value
}

func (v *NullableProcess) Set(val *Process) {
	v.value = val
	v.isSet = true
}

func (v NullableProcess) IsSet() bool {
	return v.isSet
}

func (v *NullableProcess) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcess(val *Process) *NullableProcess {
	return &NullableProcess{value: val, isSet: true}
}

func (v NullableProcess) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcess) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


