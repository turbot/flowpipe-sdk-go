/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the StepForEach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StepForEach{}

// StepForEach struct for StepForEach
type StepForEach struct {
	ForEachOutput *Output `json:"for_each_output,omitempty"`
	ForEachTotalCount int32 `json:"for_each_total_count"`
	Index int32 `json:"index"`
}
func (o StepForEach) GetResourceType() string {
	return "StepForEach"
}
// NewStepForEach instantiates a new StepForEach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStepForEach(forEachTotalCount int32, index int32) *StepForEach {
	this := StepForEach{}
	this.ForEachTotalCount = forEachTotalCount
	this.Index = index
	return &this
}

// NewStepForEachWithDefaults instantiates a new StepForEach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStepForEachWithDefaults() *StepForEach {
	this := StepForEach{}
	return &this
}

// GetForEachOutput returns the ForEachOutput field value if set, zero value otherwise.
func (o *StepForEach) GetForEachOutput() Output {
	if o == nil || IsNil(o.ForEachOutput) {
		var ret Output
		return ret
	}
	return *o.ForEachOutput
}

// GetForEachOutputOk returns a tuple with the ForEachOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StepForEach) GetForEachOutputOk() (*Output, bool) {
	if o == nil || IsNil(o.ForEachOutput) {
		return nil, false
	}
	return o.ForEachOutput, true
}

// HasForEachOutput returns a boolean if a field has been set.
func (o *StepForEach) HasForEachOutput() bool {
	if o != nil && !IsNil(o.ForEachOutput) {
		return true
	}

	return false
}

// SetForEachOutput gets a reference to the given Output and assigns it to the ForEachOutput field.
func (o *StepForEach) SetForEachOutput(v Output) {
	o.ForEachOutput = &v
}

// GetForEachTotalCount returns the ForEachTotalCount field value
func (o *StepForEach) GetForEachTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ForEachTotalCount
}

// GetForEachTotalCountOk returns a tuple with the ForEachTotalCount field value
// and a boolean to check if the value has been set.
func (o *StepForEach) GetForEachTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForEachTotalCount, true
}

// SetForEachTotalCount sets field value
func (o *StepForEach) SetForEachTotalCount(v int32) {
	o.ForEachTotalCount = v
}

// GetIndex returns the Index field value
func (o *StepForEach) GetIndex() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Index
}

// GetIndexOk returns a tuple with the Index field value
// and a boolean to check if the value has been set.
func (o *StepForEach) GetIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Index, true
}

// SetIndex sets field value
func (o *StepForEach) SetIndex(v int32) {
	o.Index = v
}

func (o StepForEach) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StepForEach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ForEachOutput) {
		toSerialize["for_each_output"] = o.ForEachOutput
	}
	toSerialize["for_each_total_count"] = o.ForEachTotalCount
	toSerialize["index"] = o.Index
	return toSerialize, nil
}

type NullableStepForEach struct {
	value *StepForEach
	isSet bool
}

func (v NullableStepForEach) Get() *StepForEach {
	return v.value
}

func (v *NullableStepForEach) Set(val *StepForEach) {
	v.value = val
	v.isSet = true
}

func (v NullableStepForEach) IsSet() bool {
	return v.isSet
}

func (v *NullableStepForEach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStepForEach(val *StepForEach) *NullableStepForEach {
	return &NullableStepForEach{value: val, isSet: true}
}

func (v NullableStepForEach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStepForEach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


