/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ExecutionStepExecutionStepForEach type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionStepExecutionStepForEach{}

// ExecutionStepExecutionStepForEach for_each controls
type ExecutionStepExecutionStepForEach struct {
	Each *string `json:"each,omitempty"`
	Key string `json:"key"`
	Output *ModconfigOutput `json:"output,omitempty"`
	TotalCount int32 `json:"total_count"`
}
func (o ExecutionStepExecutionStepForEach) GetResourceType() string {
	return "ExecutionStepExecutionStepForEach"
}
// NewExecutionStepExecutionStepForEach instantiates a new ExecutionStepExecutionStepForEach object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionStepExecutionStepForEach(key string, totalCount int32) *ExecutionStepExecutionStepForEach {
	this := ExecutionStepExecutionStepForEach{}
	this.Key = key
	this.TotalCount = totalCount
	return &this
}

// NewExecutionStepExecutionStepForEachWithDefaults instantiates a new ExecutionStepExecutionStepForEach object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionStepExecutionStepForEachWithDefaults() *ExecutionStepExecutionStepForEach {
	this := ExecutionStepExecutionStepForEach{}
	return &this
}

// GetEach returns the Each field value if set, zero value otherwise.
func (o *ExecutionStepExecutionStepForEach) GetEach() string {
	if o == nil || IsNil(o.Each) {
		var ret string
		return ret
	}
	return *o.Each
}

// GetEachOk returns a tuple with the Each field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecutionStepForEach) GetEachOk() (*string, bool) {
	if o == nil || IsNil(o.Each) {
		return nil, false
	}
	return o.Each, true
}

// HasEach returns a boolean if a field has been set.
func (o *ExecutionStepExecutionStepForEach) HasEach() bool {
	if o != nil && !IsNil(o.Each) {
		return true
	}

	return false
}

// SetEach gets a reference to the given string and assigns it to the Each field.
func (o *ExecutionStepExecutionStepForEach) SetEach(v string) {
	o.Each = &v
}

// GetKey returns the Key field value
func (o *ExecutionStepExecutionStepForEach) GetKey() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Key
}

// GetKeyOk returns a tuple with the Key field value
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecutionStepForEach) GetKeyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Key, true
}

// SetKey sets field value
func (o *ExecutionStepExecutionStepForEach) SetKey(v string) {
	o.Key = v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ExecutionStepExecutionStepForEach) GetOutput() ModconfigOutput {
	if o == nil || IsNil(o.Output) {
		var ret ModconfigOutput
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecutionStepForEach) GetOutputOk() (*ModconfigOutput, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ExecutionStepExecutionStepForEach) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given ModconfigOutput and assigns it to the Output field.
func (o *ExecutionStepExecutionStepForEach) SetOutput(v ModconfigOutput) {
	o.Output = &v
}

// GetTotalCount returns the TotalCount field value
func (o *ExecutionStepExecutionStepForEach) GetTotalCount() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TotalCount
}

// GetTotalCountOk returns a tuple with the TotalCount field value
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecutionStepForEach) GetTotalCountOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCount, true
}

// SetTotalCount sets field value
func (o *ExecutionStepExecutionStepForEach) SetTotalCount(v int32) {
	o.TotalCount = v
}

func (o ExecutionStepExecutionStepForEach) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionStepExecutionStepForEach) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Each) {
		toSerialize["each"] = o.Each
	}
	toSerialize["key"] = o.Key
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	toSerialize["total_count"] = o.TotalCount
	return toSerialize, nil
}

type NullableExecutionStepExecutionStepForEach struct {
	value *ExecutionStepExecutionStepForEach
	isSet bool
}

func (v NullableExecutionStepExecutionStepForEach) Get() *ExecutionStepExecutionStepForEach {
	return v.value
}

func (v *NullableExecutionStepExecutionStepForEach) Set(val *ExecutionStepExecutionStepForEach) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionStepExecutionStepForEach) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionStepExecutionStepForEach) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionStepExecutionStepForEach(val *ExecutionStepExecutionStepForEach) *NullableExecutionStepExecutionStepForEach {
	return &NullableExecutionStepExecutionStepForEach{value: val, isSet: true}
}

func (v NullableExecutionStepExecutionStepForEach) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionStepExecutionStepForEach) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


