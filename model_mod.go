/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the Mod type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Mod{}

// Mod struct for Mod
type Mod struct {
	Categories []string `json:"categories,omitempty"`
	Color *string `json:"color,omitempty"`
	Description *string `json:"description,omitempty"`
	Documentation *string `json:"documentation,omitempty"`
	Name *string `json:"name,omitempty"`
	Opengraph *OpenGraph `json:"opengraph,omitempty"`
	Title *string `json:"title,omitempty"`
}
func (o Mod) GetResourceType() string {
	return "Mod"
}
// NewMod instantiates a new Mod object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMod() *Mod {
	this := Mod{}
	return &this
}

// NewModWithDefaults instantiates a new Mod object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModWithDefaults() *Mod {
	this := Mod{}
	return &this
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Mod) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Mod) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Mod) SetCategories(v []string) {
	o.Categories = v
}

// GetColor returns the Color field value if set, zero value otherwise.
func (o *Mod) GetColor() string {
	if o == nil || IsNil(o.Color) {
		var ret string
		return ret
	}
	return *o.Color
}

// GetColorOk returns a tuple with the Color field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetColorOk() (*string, bool) {
	if o == nil || IsNil(o.Color) {
		return nil, false
	}
	return o.Color, true
}

// HasColor returns a boolean if a field has been set.
func (o *Mod) HasColor() bool {
	if o != nil && !IsNil(o.Color) {
		return true
	}

	return false
}

// SetColor gets a reference to the given string and assigns it to the Color field.
func (o *Mod) SetColor(v string) {
	o.Color = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Mod) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Mod) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Mod) SetDescription(v string) {
	o.Description = &v
}

// GetDocumentation returns the Documentation field value if set, zero value otherwise.
func (o *Mod) GetDocumentation() string {
	if o == nil || IsNil(o.Documentation) {
		var ret string
		return ret
	}
	return *o.Documentation
}

// GetDocumentationOk returns a tuple with the Documentation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetDocumentationOk() (*string, bool) {
	if o == nil || IsNil(o.Documentation) {
		return nil, false
	}
	return o.Documentation, true
}

// HasDocumentation returns a boolean if a field has been set.
func (o *Mod) HasDocumentation() bool {
	if o != nil && !IsNil(o.Documentation) {
		return true
	}

	return false
}

// SetDocumentation gets a reference to the given string and assigns it to the Documentation field.
func (o *Mod) SetDocumentation(v string) {
	o.Documentation = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Mod) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Mod) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Mod) SetName(v string) {
	o.Name = &v
}

// GetOpengraph returns the Opengraph field value if set, zero value otherwise.
func (o *Mod) GetOpengraph() OpenGraph {
	if o == nil || IsNil(o.Opengraph) {
		var ret OpenGraph
		return ret
	}
	return *o.Opengraph
}

// GetOpengraphOk returns a tuple with the Opengraph field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetOpengraphOk() (*OpenGraph, bool) {
	if o == nil || IsNil(o.Opengraph) {
		return nil, false
	}
	return o.Opengraph, true
}

// HasOpengraph returns a boolean if a field has been set.
func (o *Mod) HasOpengraph() bool {
	if o != nil && !IsNil(o.Opengraph) {
		return true
	}

	return false
}

// SetOpengraph gets a reference to the given OpenGraph and assigns it to the Opengraph field.
func (o *Mod) SetOpengraph(v OpenGraph) {
	o.Opengraph = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *Mod) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Mod) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *Mod) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *Mod) SetTitle(v string) {
	o.Title = &v
}

func (o Mod) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Mod) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	if !IsNil(o.Color) {
		toSerialize["color"] = o.Color
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Documentation) {
		toSerialize["documentation"] = o.Documentation
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Opengraph) {
		toSerialize["opengraph"] = o.Opengraph
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	return toSerialize, nil
}

type NullableMod struct {
	value *Mod
	isSet bool
}

func (v NullableMod) Get() *Mod {
	return v.value
}

func (v *NullableMod) Set(val *Mod) {
	v.value = val
	v.isSet = true
}

func (v NullableMod) IsSet() bool {
	return v.isSet
}

func (v *NullableMod) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMod(val *Mod) *NullableMod {
	return &NullableMod{value: val, isSet: true}
}

func (v NullableMod) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMod) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


