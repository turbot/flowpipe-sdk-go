/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ProcessOutputData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProcessOutputData{}

// ProcessOutputData struct for ProcessOutputData
type ProcessOutputData struct {
	Output map[string]interface{} `json:"output,omitempty"`
	ProcessId *string `json:"process_id,omitempty"`
}
func (o ProcessOutputData) GetResourceType() string {
	return "ProcessOutputData"
}
// NewProcessOutputData instantiates a new ProcessOutputData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProcessOutputData() *ProcessOutputData {
	this := ProcessOutputData{}
	return &this
}

// NewProcessOutputDataWithDefaults instantiates a new ProcessOutputData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProcessOutputDataWithDefaults() *ProcessOutputData {
	this := ProcessOutputData{}
	return &this
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ProcessOutputData) GetOutput() map[string]interface{} {
	if o == nil || IsNil(o.Output) {
		var ret map[string]interface{}
		return ret
	}
	return o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessOutputData) GetOutputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Output) {
		return map[string]interface{}{}, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ProcessOutputData) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given map[string]interface{} and assigns it to the Output field.
func (o *ProcessOutputData) SetOutput(v map[string]interface{}) {
	o.Output = v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *ProcessOutputData) GetProcessId() string {
	if o == nil || IsNil(o.ProcessId) {
		var ret string
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ProcessOutputData) GetProcessIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *ProcessOutputData) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given string and assigns it to the ProcessId field.
func (o *ProcessOutputData) SetProcessId(v string) {
	o.ProcessId = &v
}

func (o ProcessOutputData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProcessOutputData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.ProcessId) {
		toSerialize["process_id"] = o.ProcessId
	}
	return toSerialize, nil
}

type NullableProcessOutputData struct {
	value *ProcessOutputData
	isSet bool
}

func (v NullableProcessOutputData) Get() *ProcessOutputData {
	return v.value
}

func (v *NullableProcessOutputData) Set(val *ProcessOutputData) {
	v.value = val
	v.isSet = true
}

func (v NullableProcessOutputData) IsSet() bool {
	return v.isSet
}

func (v *NullableProcessOutputData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProcessOutputData(val *ProcessOutputData) *NullableProcessOutputData {
	return &NullableProcessOutputData{value: val, isSet: true}
}

func (v NullableProcessOutputData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProcessOutputData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


