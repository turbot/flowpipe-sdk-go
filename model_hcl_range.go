/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the HclRange type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HclRange{}

// HclRange struct for HclRange
type HclRange struct {
	// Filename is the name of the file into which this range's positions point.
	Filename *string `json:"filename,omitempty"`
	Start *HclRangeStart `json:"start,omitempty"`
}
func (o HclRange) GetResourceType() string {
	return "HclRange"
}
// NewHclRange instantiates a new HclRange object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHclRange() *HclRange {
	this := HclRange{}
	return &this
}

// NewHclRangeWithDefaults instantiates a new HclRange object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHclRangeWithDefaults() *HclRange {
	this := HclRange{}
	return &this
}

// GetFilename returns the Filename field value if set, zero value otherwise.
func (o *HclRange) GetFilename() string {
	if o == nil || IsNil(o.Filename) {
		var ret string
		return ret
	}
	return *o.Filename
}

// GetFilenameOk returns a tuple with the Filename field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclRange) GetFilenameOk() (*string, bool) {
	if o == nil || IsNil(o.Filename) {
		return nil, false
	}
	return o.Filename, true
}

// HasFilename returns a boolean if a field has been set.
func (o *HclRange) HasFilename() bool {
	if o != nil && !IsNil(o.Filename) {
		return true
	}

	return false
}

// SetFilename gets a reference to the given string and assigns it to the Filename field.
func (o *HclRange) SetFilename(v string) {
	o.Filename = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *HclRange) GetStart() HclRangeStart {
	if o == nil || IsNil(o.Start) {
		var ret HclRangeStart
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclRange) GetStartOk() (*HclRangeStart, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *HclRange) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given HclRangeStart and assigns it to the Start field.
func (o *HclRange) SetStart(v HclRangeStart) {
	o.Start = &v
}

func (o HclRange) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HclRange) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Filename) {
		toSerialize["filename"] = o.Filename
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	return toSerialize, nil
}

type NullableHclRange struct {
	value *HclRange
	isSet bool
}

func (v NullableHclRange) Get() *HclRange {
	return v.value
}

func (v *NullableHclRange) Set(val *HclRange) {
	v.value = val
	v.isSet = true
}

func (v NullableHclRange) IsSet() bool {
	return v.isSet
}

func (v *NullableHclRange) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHclRange(val *HclRange) *NullableHclRange {
	return &NullableHclRange{value: val, isSet: true}
}

func (v NullableHclRange) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHclRange) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


