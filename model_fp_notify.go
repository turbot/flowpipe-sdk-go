/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the FpNotify type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FpNotify{}

// FpNotify struct for FpNotify
type FpNotify struct {
	Bcc []string `json:"bcc,omitempty"`
	Cc []string `json:"cc,omitempty"`
	Channel *string `json:"channel,omitempty"`
	Description *string `json:"description,omitempty"`
	Integration *string `json:"integration,omitempty"`
	Subject *string `json:"subject,omitempty"`
	Title *string `json:"title,omitempty"`
	To []string `json:"to,omitempty"`
}
func (o FpNotify) GetResourceType() string {
	return "FpNotify"
}
// NewFpNotify instantiates a new FpNotify object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFpNotify() *FpNotify {
	this := FpNotify{}
	return &this
}

// NewFpNotifyWithDefaults instantiates a new FpNotify object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFpNotifyWithDefaults() *FpNotify {
	this := FpNotify{}
	return &this
}

// GetBcc returns the Bcc field value if set, zero value otherwise.
func (o *FpNotify) GetBcc() []string {
	if o == nil || IsNil(o.Bcc) {
		var ret []string
		return ret
	}
	return o.Bcc
}

// GetBccOk returns a tuple with the Bcc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetBccOk() ([]string, bool) {
	if o == nil || IsNil(o.Bcc) {
		return nil, false
	}
	return o.Bcc, true
}

// HasBcc returns a boolean if a field has been set.
func (o *FpNotify) HasBcc() bool {
	if o != nil && !IsNil(o.Bcc) {
		return true
	}

	return false
}

// SetBcc gets a reference to the given []string and assigns it to the Bcc field.
func (o *FpNotify) SetBcc(v []string) {
	o.Bcc = v
}

// GetCc returns the Cc field value if set, zero value otherwise.
func (o *FpNotify) GetCc() []string {
	if o == nil || IsNil(o.Cc) {
		var ret []string
		return ret
	}
	return o.Cc
}

// GetCcOk returns a tuple with the Cc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetCcOk() ([]string, bool) {
	if o == nil || IsNil(o.Cc) {
		return nil, false
	}
	return o.Cc, true
}

// HasCc returns a boolean if a field has been set.
func (o *FpNotify) HasCc() bool {
	if o != nil && !IsNil(o.Cc) {
		return true
	}

	return false
}

// SetCc gets a reference to the given []string and assigns it to the Cc field.
func (o *FpNotify) SetCc(v []string) {
	o.Cc = v
}

// GetChannel returns the Channel field value if set, zero value otherwise.
func (o *FpNotify) GetChannel() string {
	if o == nil || IsNil(o.Channel) {
		var ret string
		return ret
	}
	return *o.Channel
}

// GetChannelOk returns a tuple with the Channel field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetChannelOk() (*string, bool) {
	if o == nil || IsNil(o.Channel) {
		return nil, false
	}
	return o.Channel, true
}

// HasChannel returns a boolean if a field has been set.
func (o *FpNotify) HasChannel() bool {
	if o != nil && !IsNil(o.Channel) {
		return true
	}

	return false
}

// SetChannel gets a reference to the given string and assigns it to the Channel field.
func (o *FpNotify) SetChannel(v string) {
	o.Channel = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *FpNotify) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *FpNotify) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *FpNotify) SetDescription(v string) {
	o.Description = &v
}

// GetIntegration returns the Integration field value if set, zero value otherwise.
func (o *FpNotify) GetIntegration() string {
	if o == nil || IsNil(o.Integration) {
		var ret string
		return ret
	}
	return *o.Integration
}

// GetIntegrationOk returns a tuple with the Integration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetIntegrationOk() (*string, bool) {
	if o == nil || IsNil(o.Integration) {
		return nil, false
	}
	return o.Integration, true
}

// HasIntegration returns a boolean if a field has been set.
func (o *FpNotify) HasIntegration() bool {
	if o != nil && !IsNil(o.Integration) {
		return true
	}

	return false
}

// SetIntegration gets a reference to the given string and assigns it to the Integration field.
func (o *FpNotify) SetIntegration(v string) {
	o.Integration = &v
}

// GetSubject returns the Subject field value if set, zero value otherwise.
func (o *FpNotify) GetSubject() string {
	if o == nil || IsNil(o.Subject) {
		var ret string
		return ret
	}
	return *o.Subject
}

// GetSubjectOk returns a tuple with the Subject field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetSubjectOk() (*string, bool) {
	if o == nil || IsNil(o.Subject) {
		return nil, false
	}
	return o.Subject, true
}

// HasSubject returns a boolean if a field has been set.
func (o *FpNotify) HasSubject() bool {
	if o != nil && !IsNil(o.Subject) {
		return true
	}

	return false
}

// SetSubject gets a reference to the given string and assigns it to the Subject field.
func (o *FpNotify) SetSubject(v string) {
	o.Subject = &v
}

// GetTitle returns the Title field value if set, zero value otherwise.
func (o *FpNotify) GetTitle() string {
	if o == nil || IsNil(o.Title) {
		var ret string
		return ret
	}
	return *o.Title
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetTitleOk() (*string, bool) {
	if o == nil || IsNil(o.Title) {
		return nil, false
	}
	return o.Title, true
}

// HasTitle returns a boolean if a field has been set.
func (o *FpNotify) HasTitle() bool {
	if o != nil && !IsNil(o.Title) {
		return true
	}

	return false
}

// SetTitle gets a reference to the given string and assigns it to the Title field.
func (o *FpNotify) SetTitle(v string) {
	o.Title = &v
}

// GetTo returns the To field value if set, zero value otherwise.
func (o *FpNotify) GetTo() []string {
	if o == nil || IsNil(o.To) {
		var ret []string
		return ret
	}
	return o.To
}

// GetToOk returns a tuple with the To field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FpNotify) GetToOk() ([]string, bool) {
	if o == nil || IsNil(o.To) {
		return nil, false
	}
	return o.To, true
}

// HasTo returns a boolean if a field has been set.
func (o *FpNotify) HasTo() bool {
	if o != nil && !IsNil(o.To) {
		return true
	}

	return false
}

// SetTo gets a reference to the given []string and assigns it to the To field.
func (o *FpNotify) SetTo(v []string) {
	o.To = v
}

func (o FpNotify) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FpNotify) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Bcc) {
		toSerialize["bcc"] = o.Bcc
	}
	if !IsNil(o.Cc) {
		toSerialize["cc"] = o.Cc
	}
	if !IsNil(o.Channel) {
		toSerialize["channel"] = o.Channel
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Integration) {
		toSerialize["integration"] = o.Integration
	}
	if !IsNil(o.Subject) {
		toSerialize["subject"] = o.Subject
	}
	if !IsNil(o.Title) {
		toSerialize["title"] = o.Title
	}
	if !IsNil(o.To) {
		toSerialize["to"] = o.To
	}
	return toSerialize, nil
}

type NullableFpNotify struct {
	value *FpNotify
	isSet bool
}

func (v NullableFpNotify) Get() *FpNotify {
	return v.value
}

func (v *NullableFpNotify) Set(val *FpNotify) {
	v.value = val
	v.isSet = true
}

func (v NullableFpNotify) IsSet() bool {
	return v.isSet
}

func (v *NullableFpNotify) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFpNotify(val *FpNotify) *NullableFpNotify {
	return &NullableFpNotify{value: val, isSet: true}
}

func (v NullableFpNotify) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFpNotify) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


