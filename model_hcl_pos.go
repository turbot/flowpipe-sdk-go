/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the HclPos type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HclPos{}

// HclPos struct for HclPos
type HclPos struct {
	// Byte is the byte offset into the file where the indicated character begins. This is a zero-based offset to the first byte of the first UTF-8 codepoint sequence in the character, and thus gives a position that can be resolved _without_ awareness of Unicode characters.
	Byte *int32 `json:"byte,omitempty"`
	// Column is the source code column where this position points, in unicode characters, with counting starting at 1.  Column counts characters as they appear visually, so for example a latin letter with a combining diacritic mark counts as one character. This is intended for rendering visual markers against source code in contexts where these diacritics would be rendered in a single character cell. Technically speaking, Column is counting grapheme clusters as used in unicode normalization.
	Column *int32 `json:"column,omitempty"`
	// Line is the source code line where this position points. Lines are counted starting at 1 and incremented for each newline character encountered.
	Line *int32 `json:"line,omitempty"`
}
func (o HclPos) GetResourceType() string {
	return "HclPos"
}
// NewHclPos instantiates a new HclPos object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHclPos() *HclPos {
	this := HclPos{}
	return &this
}

// NewHclPosWithDefaults instantiates a new HclPos object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHclPosWithDefaults() *HclPos {
	this := HclPos{}
	return &this
}

// GetByte returns the Byte field value if set, zero value otherwise.
func (o *HclPos) GetByte() int32 {
	if o == nil || IsNil(o.Byte) {
		var ret int32
		return ret
	}
	return *o.Byte
}

// GetByteOk returns a tuple with the Byte field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclPos) GetByteOk() (*int32, bool) {
	if o == nil || IsNil(o.Byte) {
		return nil, false
	}
	return o.Byte, true
}

// HasByte returns a boolean if a field has been set.
func (o *HclPos) HasByte() bool {
	if o != nil && !IsNil(o.Byte) {
		return true
	}

	return false
}

// SetByte gets a reference to the given int32 and assigns it to the Byte field.
func (o *HclPos) SetByte(v int32) {
	o.Byte = &v
}

// GetColumn returns the Column field value if set, zero value otherwise.
func (o *HclPos) GetColumn() int32 {
	if o == nil || IsNil(o.Column) {
		var ret int32
		return ret
	}
	return *o.Column
}

// GetColumnOk returns a tuple with the Column field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclPos) GetColumnOk() (*int32, bool) {
	if o == nil || IsNil(o.Column) {
		return nil, false
	}
	return o.Column, true
}

// HasColumn returns a boolean if a field has been set.
func (o *HclPos) HasColumn() bool {
	if o != nil && !IsNil(o.Column) {
		return true
	}

	return false
}

// SetColumn gets a reference to the given int32 and assigns it to the Column field.
func (o *HclPos) SetColumn(v int32) {
	o.Column = &v
}

// GetLine returns the Line field value if set, zero value otherwise.
func (o *HclPos) GetLine() int32 {
	if o == nil || IsNil(o.Line) {
		var ret int32
		return ret
	}
	return *o.Line
}

// GetLineOk returns a tuple with the Line field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HclPos) GetLineOk() (*int32, bool) {
	if o == nil || IsNil(o.Line) {
		return nil, false
	}
	return o.Line, true
}

// HasLine returns a boolean if a field has been set.
func (o *HclPos) HasLine() bool {
	if o != nil && !IsNil(o.Line) {
		return true
	}

	return false
}

// SetLine gets a reference to the given int32 and assigns it to the Line field.
func (o *HclPos) SetLine(v int32) {
	o.Line = &v
}

func (o HclPos) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HclPos) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Byte) {
		toSerialize["byte"] = o.Byte
	}
	if !IsNil(o.Column) {
		toSerialize["column"] = o.Column
	}
	if !IsNil(o.Line) {
		toSerialize["line"] = o.Line
	}
	return toSerialize, nil
}

type NullableHclPos struct {
	value *HclPos
	isSet bool
}

func (v NullableHclPos) Get() *HclPos {
	return v.value
}

func (v *NullableHclPos) Set(val *HclPos) {
	v.value = val
	v.isSet = true
}

func (v NullableHclPos) IsSet() bool {
	return v.isSet
}

func (v *NullableHclPos) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHclPos(val *HclPos) *NullableHclPos {
	return &NullableHclPos{value: val, isSet: true}
}

func (v NullableHclPos) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHclPos) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


