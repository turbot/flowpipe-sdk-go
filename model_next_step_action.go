/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
	"fmt"
)

// NextStepAction the model 'NextStepAction'
type NextStepAction string

// List of NextStepAction
const (
	NextStepActionStart NextStepAction = "start"
	NextStepActionInaccessible NextStepAction = "inaccessible"
	NextStepActionSkip NextStepAction = "skip"
)

// All allowed values of NextStepAction enum
var AllowedNextStepActionEnumValues = []NextStepAction{
	"start",
	"inaccessible",
	"skip",
}

func (v *NextStepAction) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NextStepAction(value)
	for _, existing := range AllowedNextStepActionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NextStepAction", value)
}

// NewNextStepActionFromValue returns a pointer to a valid NextStepAction
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNextStepActionFromValue(v string) (*NextStepAction, error) {
	ev := NextStepAction(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NextStepAction: valid values are %v", v, AllowedNextStepActionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NextStepAction) IsValid() bool {
	for _, existing := range AllowedNextStepActionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NextStepAction value
func (v NextStepAction) Ptr() *NextStepAction {
	return &v
}

type NullableNextStepAction struct {
	value *NextStepAction
	isSet bool
}

func (v NullableNextStepAction) Get() *NextStepAction {
	return v.value
}

func (v *NullableNextStepAction) Set(val *NextStepAction) {
	v.value = val
	v.isSet = true
}

func (v NullableNextStepAction) IsSet() bool {
	return v.isSet
}

func (v *NullableNextStepAction) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNextStepAction(val *NextStepAction) *NullableNextStepAction {
	return &NullableNextStepAction{value: val, isSet: true}
}

func (v NullableNextStepAction) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNextStepAction) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

