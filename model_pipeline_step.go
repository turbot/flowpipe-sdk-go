/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the PipelineStep type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineStep{}

// PipelineStep struct for PipelineStep
type PipelineStep struct {
	DependsOn []string `json:"depends_on,omitempty"`
	For *string `json:"for,omitempty"`
	InputTemplate *string `json:"input_template,omitempty"`
	Name *string `json:"name,omitempty"`
	Type *string `json:"type,omitempty"`
}

// NewPipelineStep instantiates a new PipelineStep object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineStep() *PipelineStep {
	this := PipelineStep{}
	return &this
}

// NewPipelineStepWithDefaults instantiates a new PipelineStep object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineStepWithDefaults() *PipelineStep {
	this := PipelineStep{}
	return &this
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *PipelineStep) GetDependsOn() []string {
	if o == nil || IsNil(o.DependsOn) {
		var ret []string
		return ret
	}
	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStep) GetDependsOnOk() ([]string, bool) {
	if o == nil || IsNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *PipelineStep) HasDependsOn() bool {
	if o != nil && !IsNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []string and assigns it to the DependsOn field.
func (o *PipelineStep) SetDependsOn(v []string) {
	o.DependsOn = v
}

// GetFor returns the For field value if set, zero value otherwise.
func (o *PipelineStep) GetFor() string {
	if o == nil || IsNil(o.For) {
		var ret string
		return ret
	}
	return *o.For
}

// GetForOk returns a tuple with the For field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStep) GetForOk() (*string, bool) {
	if o == nil || IsNil(o.For) {
		return nil, false
	}
	return o.For, true
}

// HasFor returns a boolean if a field has been set.
func (o *PipelineStep) HasFor() bool {
	if o != nil && !IsNil(o.For) {
		return true
	}

	return false
}

// SetFor gets a reference to the given string and assigns it to the For field.
func (o *PipelineStep) SetFor(v string) {
	o.For = &v
}

// GetInputTemplate returns the InputTemplate field value if set, zero value otherwise.
func (o *PipelineStep) GetInputTemplate() string {
	if o == nil || IsNil(o.InputTemplate) {
		var ret string
		return ret
	}
	return *o.InputTemplate
}

// GetInputTemplateOk returns a tuple with the InputTemplate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStep) GetInputTemplateOk() (*string, bool) {
	if o == nil || IsNil(o.InputTemplate) {
		return nil, false
	}
	return o.InputTemplate, true
}

// HasInputTemplate returns a boolean if a field has been set.
func (o *PipelineStep) HasInputTemplate() bool {
	if o != nil && !IsNil(o.InputTemplate) {
		return true
	}

	return false
}

// SetInputTemplate gets a reference to the given string and assigns it to the InputTemplate field.
func (o *PipelineStep) SetInputTemplate(v string) {
	o.InputTemplate = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PipelineStep) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStep) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PipelineStep) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PipelineStep) SetName(v string) {
	o.Name = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *PipelineStep) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineStep) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *PipelineStep) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *PipelineStep) SetType(v string) {
	o.Type = &v
}

func (o PipelineStep) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineStep) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DependsOn) {
		toSerialize["depends_on"] = o.DependsOn
	}
	if !IsNil(o.For) {
		toSerialize["for"] = o.For
	}
	if !IsNil(o.InputTemplate) {
		toSerialize["input_template"] = o.InputTemplate
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullablePipelineStep struct {
	value *PipelineStep
	isSet bool
}

func (v NullablePipelineStep) Get() *PipelineStep {
	return v.value
}

func (v *NullablePipelineStep) Set(val *PipelineStep) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineStep) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineStep) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineStep(val *PipelineStep) *NullablePipelineStep {
	return &NullablePipelineStep{value: val, isSet: true}
}

func (v NullablePipelineStep) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineStep) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


