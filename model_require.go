/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the Require type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Require{}

// Require struct for Require
type Require struct {
	Flowpipe *FlowpipeRequire `json:"flowpipe,omitempty"`
	Mods []ModVersionConstraint `json:"mods,omitempty"`
}
func (o Require) GetResourceType() string {
	return "Require"
}
// NewRequire instantiates a new Require object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRequire() *Require {
	this := Require{}
	return &this
}

// NewRequireWithDefaults instantiates a new Require object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRequireWithDefaults() *Require {
	this := Require{}
	return &this
}

// GetFlowpipe returns the Flowpipe field value if set, zero value otherwise.
func (o *Require) GetFlowpipe() FlowpipeRequire {
	if o == nil || IsNil(o.Flowpipe) {
		var ret FlowpipeRequire
		return ret
	}
	return *o.Flowpipe
}

// GetFlowpipeOk returns a tuple with the Flowpipe field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Require) GetFlowpipeOk() (*FlowpipeRequire, bool) {
	if o == nil || IsNil(o.Flowpipe) {
		return nil, false
	}
	return o.Flowpipe, true
}

// HasFlowpipe returns a boolean if a field has been set.
func (o *Require) HasFlowpipe() bool {
	if o != nil && !IsNil(o.Flowpipe) {
		return true
	}

	return false
}

// SetFlowpipe gets a reference to the given FlowpipeRequire and assigns it to the Flowpipe field.
func (o *Require) SetFlowpipe(v FlowpipeRequire) {
	o.Flowpipe = &v
}

// GetMods returns the Mods field value if set, zero value otherwise.
func (o *Require) GetMods() []ModVersionConstraint {
	if o == nil || IsNil(o.Mods) {
		var ret []ModVersionConstraint
		return ret
	}
	return o.Mods
}

// GetModsOk returns a tuple with the Mods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Require) GetModsOk() ([]ModVersionConstraint, bool) {
	if o == nil || IsNil(o.Mods) {
		return nil, false
	}
	return o.Mods, true
}

// HasMods returns a boolean if a field has been set.
func (o *Require) HasMods() bool {
	if o != nil && !IsNil(o.Mods) {
		return true
	}

	return false
}

// SetMods gets a reference to the given []ModVersionConstraint and assigns it to the Mods field.
func (o *Require) SetMods(v []ModVersionConstraint) {
	o.Mods = v
}

func (o Require) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Require) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Flowpipe) {
		toSerialize["flowpipe"] = o.Flowpipe
	}
	if !IsNil(o.Mods) {
		toSerialize["mods"] = o.Mods
	}
	return toSerialize, nil
}

type NullableRequire struct {
	value *Require
	isSet bool
}

func (v NullableRequire) Get() *Require {
	return v.value
}

func (v *NullableRequire) Set(val *Require) {
	v.value = val
	v.isSet = true
}

func (v NullableRequire) IsSet() bool {
	return v.isSet
}

func (v *NullableRequire) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRequire(val *Require) *NullableRequire {
	return &NullableRequire{value: val, isSet: true}
}

func (v NullableRequire) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRequire) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


