/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ModconfigPipeline type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModconfigPipeline{}

// ModconfigPipeline struct for ModconfigPipeline
type ModconfigPipeline struct {
	Name *string `json:"name,omitempty"`
	Outputs []ModconfigPipelineOutput `json:"outputs,omitempty"`
	// TODO: hack to serialise pipeline name because HclResourceImpl is not serialised
	PipelineName *string `json:"pipeline_name,omitempty"`
	Steps []map[string]interface{} `json:"steps,omitempty"`
}
func (o ModconfigPipeline) GetResourceType() string {
	return "ModconfigPipeline"
}
// NewModconfigPipeline instantiates a new ModconfigPipeline object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModconfigPipeline() *ModconfigPipeline {
	this := ModconfigPipeline{}
	return &this
}

// NewModconfigPipelineWithDefaults instantiates a new ModconfigPipeline object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModconfigPipelineWithDefaults() *ModconfigPipeline {
	this := ModconfigPipeline{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ModconfigPipeline) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModconfigPipeline) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ModconfigPipeline) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ModconfigPipeline) SetName(v string) {
	o.Name = &v
}

// GetOutputs returns the Outputs field value if set, zero value otherwise.
func (o *ModconfigPipeline) GetOutputs() []ModconfigPipelineOutput {
	if o == nil || IsNil(o.Outputs) {
		var ret []ModconfigPipelineOutput
		return ret
	}
	return o.Outputs
}

// GetOutputsOk returns a tuple with the Outputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModconfigPipeline) GetOutputsOk() ([]ModconfigPipelineOutput, bool) {
	if o == nil || IsNil(o.Outputs) {
		return nil, false
	}
	return o.Outputs, true
}

// HasOutputs returns a boolean if a field has been set.
func (o *ModconfigPipeline) HasOutputs() bool {
	if o != nil && !IsNil(o.Outputs) {
		return true
	}

	return false
}

// SetOutputs gets a reference to the given []ModconfigPipelineOutput and assigns it to the Outputs field.
func (o *ModconfigPipeline) SetOutputs(v []ModconfigPipelineOutput) {
	o.Outputs = v
}

// GetPipelineName returns the PipelineName field value if set, zero value otherwise.
func (o *ModconfigPipeline) GetPipelineName() string {
	if o == nil || IsNil(o.PipelineName) {
		var ret string
		return ret
	}
	return *o.PipelineName
}

// GetPipelineNameOk returns a tuple with the PipelineName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModconfigPipeline) GetPipelineNameOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineName) {
		return nil, false
	}
	return o.PipelineName, true
}

// HasPipelineName returns a boolean if a field has been set.
func (o *ModconfigPipeline) HasPipelineName() bool {
	if o != nil && !IsNil(o.PipelineName) {
		return true
	}

	return false
}

// SetPipelineName gets a reference to the given string and assigns it to the PipelineName field.
func (o *ModconfigPipeline) SetPipelineName(v string) {
	o.PipelineName = &v
}

// GetSteps returns the Steps field value if set, zero value otherwise.
func (o *ModconfigPipeline) GetSteps() []map[string]interface{} {
	if o == nil || IsNil(o.Steps) {
		var ret []map[string]interface{}
		return ret
	}
	return o.Steps
}

// GetStepsOk returns a tuple with the Steps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModconfigPipeline) GetStepsOk() ([]map[string]interface{}, bool) {
	if o == nil || IsNil(o.Steps) {
		return nil, false
	}
	return o.Steps, true
}

// HasSteps returns a boolean if a field has been set.
func (o *ModconfigPipeline) HasSteps() bool {
	if o != nil && !IsNil(o.Steps) {
		return true
	}

	return false
}

// SetSteps gets a reference to the given []map[string]interface{} and assigns it to the Steps field.
func (o *ModconfigPipeline) SetSteps(v []map[string]interface{}) {
	o.Steps = v
}

func (o ModconfigPipeline) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModconfigPipeline) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Outputs) {
		toSerialize["outputs"] = o.Outputs
	}
	if !IsNil(o.PipelineName) {
		toSerialize["pipeline_name"] = o.PipelineName
	}
	if !IsNil(o.Steps) {
		toSerialize["steps"] = o.Steps
	}
	return toSerialize, nil
}

type NullableModconfigPipeline struct {
	value *ModconfigPipeline
	isSet bool
}

func (v NullableModconfigPipeline) Get() *ModconfigPipeline {
	return v.value
}

func (v *NullableModconfigPipeline) Set(val *ModconfigPipeline) {
	v.value = val
	v.isSet = true
}

func (v NullableModconfigPipeline) IsSet() bool {
	return v.isSet
}

func (v *NullableModconfigPipeline) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModconfigPipeline(val *ModconfigPipeline) *NullableModconfigPipeline {
	return &NullableModconfigPipeline{value: val, isSet: true}
}

func (v NullableModconfigPipeline) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModconfigPipeline) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


