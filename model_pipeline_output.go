/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the PipelineOutput type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PipelineOutput{}

// PipelineOutput struct for PipelineOutput
type PipelineOutput struct {
	DependsOn []string `json:"depends_on,omitempty"`
	Name *string `json:"name,omitempty"`
	Resolved *bool `json:"resolved,omitempty"`
	Sensitive *bool `json:"sensitive,omitempty"`
	Value map[string]interface{} `json:"value,omitempty"`
}
func (o PipelineOutput) GetResourceType() string {
	return "PipelineOutput"
}
// NewPipelineOutput instantiates a new PipelineOutput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPipelineOutput() *PipelineOutput {
	this := PipelineOutput{}
	return &this
}

// NewPipelineOutputWithDefaults instantiates a new PipelineOutput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPipelineOutputWithDefaults() *PipelineOutput {
	this := PipelineOutput{}
	return &this
}

// GetDependsOn returns the DependsOn field value if set, zero value otherwise.
func (o *PipelineOutput) GetDependsOn() []string {
	if o == nil || IsNil(o.DependsOn) {
		var ret []string
		return ret
	}
	return o.DependsOn
}

// GetDependsOnOk returns a tuple with the DependsOn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineOutput) GetDependsOnOk() ([]string, bool) {
	if o == nil || IsNil(o.DependsOn) {
		return nil, false
	}
	return o.DependsOn, true
}

// HasDependsOn returns a boolean if a field has been set.
func (o *PipelineOutput) HasDependsOn() bool {
	if o != nil && !IsNil(o.DependsOn) {
		return true
	}

	return false
}

// SetDependsOn gets a reference to the given []string and assigns it to the DependsOn field.
func (o *PipelineOutput) SetDependsOn(v []string) {
	o.DependsOn = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *PipelineOutput) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineOutput) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *PipelineOutput) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *PipelineOutput) SetName(v string) {
	o.Name = &v
}

// GetResolved returns the Resolved field value if set, zero value otherwise.
func (o *PipelineOutput) GetResolved() bool {
	if o == nil || IsNil(o.Resolved) {
		var ret bool
		return ret
	}
	return *o.Resolved
}

// GetResolvedOk returns a tuple with the Resolved field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineOutput) GetResolvedOk() (*bool, bool) {
	if o == nil || IsNil(o.Resolved) {
		return nil, false
	}
	return o.Resolved, true
}

// HasResolved returns a boolean if a field has been set.
func (o *PipelineOutput) HasResolved() bool {
	if o != nil && !IsNil(o.Resolved) {
		return true
	}

	return false
}

// SetResolved gets a reference to the given bool and assigns it to the Resolved field.
func (o *PipelineOutput) SetResolved(v bool) {
	o.Resolved = &v
}

// GetSensitive returns the Sensitive field value if set, zero value otherwise.
func (o *PipelineOutput) GetSensitive() bool {
	if o == nil || IsNil(o.Sensitive) {
		var ret bool
		return ret
	}
	return *o.Sensitive
}

// GetSensitiveOk returns a tuple with the Sensitive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineOutput) GetSensitiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Sensitive) {
		return nil, false
	}
	return o.Sensitive, true
}

// HasSensitive returns a boolean if a field has been set.
func (o *PipelineOutput) HasSensitive() bool {
	if o != nil && !IsNil(o.Sensitive) {
		return true
	}

	return false
}

// SetSensitive gets a reference to the given bool and assigns it to the Sensitive field.
func (o *PipelineOutput) SetSensitive(v bool) {
	o.Sensitive = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *PipelineOutput) GetValue() map[string]interface{} {
	if o == nil || IsNil(o.Value) {
		var ret map[string]interface{}
		return ret
	}
	return o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PipelineOutput) GetValueOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Value) {
		return map[string]interface{}{}, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *PipelineOutput) HasValue() bool {
	if o != nil && !IsNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given map[string]interface{} and assigns it to the Value field.
func (o *PipelineOutput) SetValue(v map[string]interface{}) {
	o.Value = v
}

func (o PipelineOutput) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PipelineOutput) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.DependsOn) {
		toSerialize["depends_on"] = o.DependsOn
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Resolved) {
		toSerialize["resolved"] = o.Resolved
	}
	if !IsNil(o.Sensitive) {
		toSerialize["sensitive"] = o.Sensitive
	}
	if !IsNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	return toSerialize, nil
}

type NullablePipelineOutput struct {
	value *PipelineOutput
	isSet bool
}

func (v NullablePipelineOutput) Get() *PipelineOutput {
	return v.value
}

func (v *NullablePipelineOutput) Set(val *PipelineOutput) {
	v.value = val
	v.isSet = true
}

func (v NullablePipelineOutput) IsSet() bool {
	return v.isSet
}

func (v *NullablePipelineOutput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePipelineOutput(val *PipelineOutput) *NullablePipelineOutput {
	return &NullablePipelineOutput{value: val, isSet: true}
}

func (v NullablePipelineOutput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePipelineOutput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


