/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the EventEventLogImpl type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &EventEventLogImpl{}

// EventEventLogImpl struct for EventEventLogImpl
type EventEventLogImpl struct {
	CreatedAt *string `json:"created_at,omitempty"`
	Detail map[string]interface{} `json:"detail,omitempty"`
	Id *string `json:"id,omitempty"`
	Level *string `json:"level,omitempty"`
	Message *string `json:"message,omitempty"`
	ProcessId *string `json:"process_id,omitempty"`
	StructVersion *string `json:"struct_version,omitempty"`
}
func (o EventEventLogImpl) GetResourceType() string {
	return "EventEventLogImpl"
}
// NewEventEventLogImpl instantiates a new EventEventLogImpl object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEventEventLogImpl() *EventEventLogImpl {
	this := EventEventLogImpl{}
	return &this
}

// NewEventEventLogImplWithDefaults instantiates a new EventEventLogImpl object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventEventLogImplWithDefaults() *EventEventLogImpl {
	this := EventEventLogImpl{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetCreatedAt() string {
	if o == nil || IsNil(o.CreatedAt) {
		var ret string
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetCreatedAtOk() (*string, bool) {
	if o == nil || IsNil(o.CreatedAt) {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasCreatedAt() bool {
	if o != nil && !IsNil(o.CreatedAt) {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given string and assigns it to the CreatedAt field.
func (o *EventEventLogImpl) SetCreatedAt(v string) {
	o.CreatedAt = &v
}

// GetDetail returns the Detail field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetDetail() map[string]interface{} {
	if o == nil || IsNil(o.Detail) {
		var ret map[string]interface{}
		return ret
	}
	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetDetailOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Detail) {
		return map[string]interface{}{}, false
	}
	return o.Detail, true
}

// HasDetail returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasDetail() bool {
	if o != nil && !IsNil(o.Detail) {
		return true
	}

	return false
}

// SetDetail gets a reference to the given map[string]interface{} and assigns it to the Detail field.
func (o *EventEventLogImpl) SetDetail(v map[string]interface{}) {
	o.Detail = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *EventEventLogImpl) SetId(v string) {
	o.Id = &v
}

// GetLevel returns the Level field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetLevel() string {
	if o == nil || IsNil(o.Level) {
		var ret string
		return ret
	}
	return *o.Level
}

// GetLevelOk returns a tuple with the Level field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetLevelOk() (*string, bool) {
	if o == nil || IsNil(o.Level) {
		return nil, false
	}
	return o.Level, true
}

// HasLevel returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasLevel() bool {
	if o != nil && !IsNil(o.Level) {
		return true
	}

	return false
}

// SetLevel gets a reference to the given string and assigns it to the Level field.
func (o *EventEventLogImpl) SetLevel(v string) {
	o.Level = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetMessage() string {
	if o == nil || IsNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetMessageOk() (*string, bool) {
	if o == nil || IsNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasMessage() bool {
	if o != nil && !IsNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *EventEventLogImpl) SetMessage(v string) {
	o.Message = &v
}

// GetProcessId returns the ProcessId field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetProcessId() string {
	if o == nil || IsNil(o.ProcessId) {
		var ret string
		return ret
	}
	return *o.ProcessId
}

// GetProcessIdOk returns a tuple with the ProcessId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetProcessIdOk() (*string, bool) {
	if o == nil || IsNil(o.ProcessId) {
		return nil, false
	}
	return o.ProcessId, true
}

// HasProcessId returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasProcessId() bool {
	if o != nil && !IsNil(o.ProcessId) {
		return true
	}

	return false
}

// SetProcessId gets a reference to the given string and assigns it to the ProcessId field.
func (o *EventEventLogImpl) SetProcessId(v string) {
	o.ProcessId = &v
}

// GetStructVersion returns the StructVersion field value if set, zero value otherwise.
func (o *EventEventLogImpl) GetStructVersion() string {
	if o == nil || IsNil(o.StructVersion) {
		var ret string
		return ret
	}
	return *o.StructVersion
}

// GetStructVersionOk returns a tuple with the StructVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *EventEventLogImpl) GetStructVersionOk() (*string, bool) {
	if o == nil || IsNil(o.StructVersion) {
		return nil, false
	}
	return o.StructVersion, true
}

// HasStructVersion returns a boolean if a field has been set.
func (o *EventEventLogImpl) HasStructVersion() bool {
	if o != nil && !IsNil(o.StructVersion) {
		return true
	}

	return false
}

// SetStructVersion gets a reference to the given string and assigns it to the StructVersion field.
func (o *EventEventLogImpl) SetStructVersion(v string) {
	o.StructVersion = &v
}

func (o EventEventLogImpl) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o EventEventLogImpl) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.CreatedAt) {
		toSerialize["created_at"] = o.CreatedAt
	}
	if !IsNil(o.Detail) {
		toSerialize["detail"] = o.Detail
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Level) {
		toSerialize["level"] = o.Level
	}
	if !IsNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !IsNil(o.ProcessId) {
		toSerialize["process_id"] = o.ProcessId
	}
	if !IsNil(o.StructVersion) {
		toSerialize["struct_version"] = o.StructVersion
	}
	return toSerialize, nil
}

type NullableEventEventLogImpl struct {
	value *EventEventLogImpl
	isSet bool
}

func (v NullableEventEventLogImpl) Get() *EventEventLogImpl {
	return v.value
}

func (v *NullableEventEventLogImpl) Set(val *EventEventLogImpl) {
	v.value = val
	v.isSet = true
}

func (v NullableEventEventLogImpl) IsSet() bool {
	return v.isSet
}

func (v *NullableEventEventLogImpl) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEventEventLogImpl(val *EventEventLogImpl) *NullableEventEventLogImpl {
	return &NullableEventEventLogImpl{value: val, isSet: true}
}

func (v NullableEventEventLogImpl) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEventEventLogImpl) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


