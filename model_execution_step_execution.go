/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ExecutionStepExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionStepExecution{}

// ExecutionStepExecution struct for ExecutionStepExecution
type ExecutionStepExecution struct {
	Id *string `json:"id,omitempty"`
	Input map[string]interface{} `json:"input,omitempty"`
	// The name of the step in the pipeline definition
	Name *string `json:"name,omitempty"`
	NextStepAction *ModconfigNextStepAction `json:"next_step_action,omitempty"`
	Output *ExecutionStepExecutionOutput `json:"output,omitempty"`
	// Unique identifier for this step execution
	PipelineExecutionId *string `json:"pipeline_execution_id,omitempty"`
	// The status of the step execution: \"started\", \"finished\", \"failed\", \"skipped\"
	Status *string `json:"status,omitempty"`
	StepForEach *ExecutionStepExecutionStepForEach `json:"step_for_each,omitempty"`
}
func (o ExecutionStepExecution) GetResourceType() string {
	return "ExecutionStepExecution"
}
// NewExecutionStepExecution instantiates a new ExecutionStepExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionStepExecution() *ExecutionStepExecution {
	this := ExecutionStepExecution{}
	return &this
}

// NewExecutionStepExecutionWithDefaults instantiates a new ExecutionStepExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionStepExecutionWithDefaults() *ExecutionStepExecution {
	this := ExecutionStepExecution{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionStepExecution) SetId(v string) {
	o.Id = &v
}

// GetInput returns the Input field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetInput() map[string]interface{} {
	if o == nil || IsNil(o.Input) {
		var ret map[string]interface{}
		return ret
	}
	return o.Input
}

// GetInputOk returns a tuple with the Input field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetInputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Input) {
		return map[string]interface{}{}, false
	}
	return o.Input, true
}

// HasInput returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasInput() bool {
	if o != nil && !IsNil(o.Input) {
		return true
	}

	return false
}

// SetInput gets a reference to the given map[string]interface{} and assigns it to the Input field.
func (o *ExecutionStepExecution) SetInput(v map[string]interface{}) {
	o.Input = v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExecutionStepExecution) SetName(v string) {
	o.Name = &v
}

// GetNextStepAction returns the NextStepAction field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetNextStepAction() ModconfigNextStepAction {
	if o == nil || IsNil(o.NextStepAction) {
		var ret ModconfigNextStepAction
		return ret
	}
	return *o.NextStepAction
}

// GetNextStepActionOk returns a tuple with the NextStepAction field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetNextStepActionOk() (*ModconfigNextStepAction, bool) {
	if o == nil || IsNil(o.NextStepAction) {
		return nil, false
	}
	return o.NextStepAction, true
}

// HasNextStepAction returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasNextStepAction() bool {
	if o != nil && !IsNil(o.NextStepAction) {
		return true
	}

	return false
}

// SetNextStepAction gets a reference to the given ModconfigNextStepAction and assigns it to the NextStepAction field.
func (o *ExecutionStepExecution) SetNextStepAction(v ModconfigNextStepAction) {
	o.NextStepAction = &v
}

// GetOutput returns the Output field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetOutput() ExecutionStepExecutionOutput {
	if o == nil || IsNil(o.Output) {
		var ret ExecutionStepExecutionOutput
		return ret
	}
	return *o.Output
}

// GetOutputOk returns a tuple with the Output field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetOutputOk() (*ExecutionStepExecutionOutput, bool) {
	if o == nil || IsNil(o.Output) {
		return nil, false
	}
	return o.Output, true
}

// HasOutput returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasOutput() bool {
	if o != nil && !IsNil(o.Output) {
		return true
	}

	return false
}

// SetOutput gets a reference to the given ExecutionStepExecutionOutput and assigns it to the Output field.
func (o *ExecutionStepExecution) SetOutput(v ExecutionStepExecutionOutput) {
	o.Output = &v
}

// GetPipelineExecutionId returns the PipelineExecutionId field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetPipelineExecutionId() string {
	if o == nil || IsNil(o.PipelineExecutionId) {
		var ret string
		return ret
	}
	return *o.PipelineExecutionId
}

// GetPipelineExecutionIdOk returns a tuple with the PipelineExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetPipelineExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.PipelineExecutionId) {
		return nil, false
	}
	return o.PipelineExecutionId, true
}

// HasPipelineExecutionId returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasPipelineExecutionId() bool {
	if o != nil && !IsNil(o.PipelineExecutionId) {
		return true
	}

	return false
}

// SetPipelineExecutionId gets a reference to the given string and assigns it to the PipelineExecutionId field.
func (o *ExecutionStepExecution) SetPipelineExecutionId(v string) {
	o.PipelineExecutionId = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExecutionStepExecution) SetStatus(v string) {
	o.Status = &v
}

// GetStepForEach returns the StepForEach field value if set, zero value otherwise.
func (o *ExecutionStepExecution) GetStepForEach() ExecutionStepExecutionStepForEach {
	if o == nil || IsNil(o.StepForEach) {
		var ret ExecutionStepExecutionStepForEach
		return ret
	}
	return *o.StepForEach
}

// GetStepForEachOk returns a tuple with the StepForEach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionStepExecution) GetStepForEachOk() (*ExecutionStepExecutionStepForEach, bool) {
	if o == nil || IsNil(o.StepForEach) {
		return nil, false
	}
	return o.StepForEach, true
}

// HasStepForEach returns a boolean if a field has been set.
func (o *ExecutionStepExecution) HasStepForEach() bool {
	if o != nil && !IsNil(o.StepForEach) {
		return true
	}

	return false
}

// SetStepForEach gets a reference to the given ExecutionStepExecutionStepForEach and assigns it to the StepForEach field.
func (o *ExecutionStepExecution) SetStepForEach(v ExecutionStepExecutionStepForEach) {
	o.StepForEach = &v
}

func (o ExecutionStepExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionStepExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Input) {
		toSerialize["input"] = o.Input
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.NextStepAction) {
		toSerialize["next_step_action"] = o.NextStepAction
	}
	if !IsNil(o.Output) {
		toSerialize["output"] = o.Output
	}
	if !IsNil(o.PipelineExecutionId) {
		toSerialize["pipeline_execution_id"] = o.PipelineExecutionId
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StepForEach) {
		toSerialize["step_for_each"] = o.StepForEach
	}
	return toSerialize, nil
}

type NullableExecutionStepExecution struct {
	value *ExecutionStepExecution
	isSet bool
}

func (v NullableExecutionStepExecution) Get() *ExecutionStepExecution {
	return v.value
}

func (v *NullableExecutionStepExecution) Set(val *ExecutionStepExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionStepExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionStepExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionStepExecution(val *ExecutionStepExecution) *NullableExecutionStepExecution {
	return &NullableExecutionStepExecution{value: val, isSet: true}
}

func (v NullableExecutionStepExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionStepExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


