/*
Flowpipe

Flowpipe is workflow and pipelines for DevSecOps.

API version: 0.1.0
Contact: info@flowpipe.io
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package flowpipeapi

import (
	"encoding/json"
)

// checks if the ExecutionPipelineExecution type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ExecutionPipelineExecution{}

// ExecutionPipelineExecution struct for ExecutionPipelineExecution
type ExecutionPipelineExecution struct {
	Args map[string]interface{} `json:"args,omitempty"`
	EndTime *string `json:"end_time,omitempty"`
	// All errors from the step execution + any errors that can be added to the pipeline execution manually
	Errors []ModconfigStepError `json:"errors,omitempty"`
	// Unique identifier for this pipeline execution
	Id *string `json:"id,omitempty"`
	// The name of the pipeline
	Name *string `json:"name,omitempty"`
	ParentExecutionId *string `json:"parent_execution_id,omitempty"`
	// If this is a child pipeline, then track it's parent
	ParentStepExecutionId *string `json:"parent_step_execution_id,omitempty"`
	// The output of the pipeline
	PipelineOutput map[string]interface{} `json:"pipeline_output,omitempty"`
	StartTime *string `json:"start_time,omitempty"`
	// The status of the pipeline execution: queued, planned, started, completed, failed
	Status *string `json:"status,omitempty"`
	// Status of each step on a per-step index basis. Used to determine if dependencies have been met etc. Note that each step may have multiple executions, the status of which are not tracked here. dependencies have been met, etc.  The Step Status used to be per-step, however the addition of for_each means that we now need to expand this tracking to include the \"index\" of the step  for_each have 2 type of results: list or map, however in Flowpipe they are both treated as a map, the list is simply a map that the key happens to be a string of \"0\", \"1\", \"2\"    The data structure of StepStatus is as follow:   {    \"echo.echo\": {     \"0\": {      xyz     },     \"1\": {      xyz     }    },    \"http.one\": {     \"foo\": {      zzz     },     \"bar\": {      yyy     }    }   }    echo.echo has a for_each which is a list, so the key is the index of the list    http.one has a for_each which is a map, so the key is the key of the map    LOOP    Since we added loop, the data structure can get rather complicated. A loop is simply another map which the key is   \"0\", \"1\", \"2\". So in a way like for_each that has a list result.    If the step has a loop and for_each the data is nested twice, i.e.: [\"0\"][\"1\"]   *
	StepStatus *map[string]map[string]ExecutionStepStatus `json:"step_status,omitempty"`
}
func (o ExecutionPipelineExecution) GetResourceType() string {
	return "ExecutionPipelineExecution"
}
// NewExecutionPipelineExecution instantiates a new ExecutionPipelineExecution object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewExecutionPipelineExecution() *ExecutionPipelineExecution {
	this := ExecutionPipelineExecution{}
	return &this
}

// NewExecutionPipelineExecutionWithDefaults instantiates a new ExecutionPipelineExecution object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewExecutionPipelineExecutionWithDefaults() *ExecutionPipelineExecution {
	this := ExecutionPipelineExecution{}
	return &this
}

// GetArgs returns the Args field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetArgs() map[string]interface{} {
	if o == nil || IsNil(o.Args) {
		var ret map[string]interface{}
		return ret
	}
	return o.Args
}

// GetArgsOk returns a tuple with the Args field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetArgsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Args) {
		return map[string]interface{}{}, false
	}
	return o.Args, true
}

// HasArgs returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasArgs() bool {
	if o != nil && !IsNil(o.Args) {
		return true
	}

	return false
}

// SetArgs gets a reference to the given map[string]interface{} and assigns it to the Args field.
func (o *ExecutionPipelineExecution) SetArgs(v map[string]interface{}) {
	o.Args = v
}

// GetEndTime returns the EndTime field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetEndTime() string {
	if o == nil || IsNil(o.EndTime) {
		var ret string
		return ret
	}
	return *o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetEndTimeOk() (*string, bool) {
	if o == nil || IsNil(o.EndTime) {
		return nil, false
	}
	return o.EndTime, true
}

// HasEndTime returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasEndTime() bool {
	if o != nil && !IsNil(o.EndTime) {
		return true
	}

	return false
}

// SetEndTime gets a reference to the given string and assigns it to the EndTime field.
func (o *ExecutionPipelineExecution) SetEndTime(v string) {
	o.EndTime = &v
}

// GetErrors returns the Errors field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetErrors() []ModconfigStepError {
	if o == nil || IsNil(o.Errors) {
		var ret []ModconfigStepError
		return ret
	}
	return o.Errors
}

// GetErrorsOk returns a tuple with the Errors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetErrorsOk() ([]ModconfigStepError, bool) {
	if o == nil || IsNil(o.Errors) {
		return nil, false
	}
	return o.Errors, true
}

// HasErrors returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasErrors() bool {
	if o != nil && !IsNil(o.Errors) {
		return true
	}

	return false
}

// SetErrors gets a reference to the given []ModconfigStepError and assigns it to the Errors field.
func (o *ExecutionPipelineExecution) SetErrors(v []ModconfigStepError) {
	o.Errors = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ExecutionPipelineExecution) SetId(v string) {
	o.Id = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ExecutionPipelineExecution) SetName(v string) {
	o.Name = &v
}

// GetParentExecutionId returns the ParentExecutionId field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetParentExecutionId() string {
	if o == nil || IsNil(o.ParentExecutionId) {
		var ret string
		return ret
	}
	return *o.ParentExecutionId
}

// GetParentExecutionIdOk returns a tuple with the ParentExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetParentExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentExecutionId) {
		return nil, false
	}
	return o.ParentExecutionId, true
}

// HasParentExecutionId returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasParentExecutionId() bool {
	if o != nil && !IsNil(o.ParentExecutionId) {
		return true
	}

	return false
}

// SetParentExecutionId gets a reference to the given string and assigns it to the ParentExecutionId field.
func (o *ExecutionPipelineExecution) SetParentExecutionId(v string) {
	o.ParentExecutionId = &v
}

// GetParentStepExecutionId returns the ParentStepExecutionId field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetParentStepExecutionId() string {
	if o == nil || IsNil(o.ParentStepExecutionId) {
		var ret string
		return ret
	}
	return *o.ParentStepExecutionId
}

// GetParentStepExecutionIdOk returns a tuple with the ParentStepExecutionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetParentStepExecutionIdOk() (*string, bool) {
	if o == nil || IsNil(o.ParentStepExecutionId) {
		return nil, false
	}
	return o.ParentStepExecutionId, true
}

// HasParentStepExecutionId returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasParentStepExecutionId() bool {
	if o != nil && !IsNil(o.ParentStepExecutionId) {
		return true
	}

	return false
}

// SetParentStepExecutionId gets a reference to the given string and assigns it to the ParentStepExecutionId field.
func (o *ExecutionPipelineExecution) SetParentStepExecutionId(v string) {
	o.ParentStepExecutionId = &v
}

// GetPipelineOutput returns the PipelineOutput field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetPipelineOutput() map[string]interface{} {
	if o == nil || IsNil(o.PipelineOutput) {
		var ret map[string]interface{}
		return ret
	}
	return o.PipelineOutput
}

// GetPipelineOutputOk returns a tuple with the PipelineOutput field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetPipelineOutputOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.PipelineOutput) {
		return map[string]interface{}{}, false
	}
	return o.PipelineOutput, true
}

// HasPipelineOutput returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasPipelineOutput() bool {
	if o != nil && !IsNil(o.PipelineOutput) {
		return true
	}

	return false
}

// SetPipelineOutput gets a reference to the given map[string]interface{} and assigns it to the PipelineOutput field.
func (o *ExecutionPipelineExecution) SetPipelineOutput(v map[string]interface{}) {
	o.PipelineOutput = v
}

// GetStartTime returns the StartTime field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetStartTime() string {
	if o == nil || IsNil(o.StartTime) {
		var ret string
		return ret
	}
	return *o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetStartTimeOk() (*string, bool) {
	if o == nil || IsNil(o.StartTime) {
		return nil, false
	}
	return o.StartTime, true
}

// HasStartTime returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasStartTime() bool {
	if o != nil && !IsNil(o.StartTime) {
		return true
	}

	return false
}

// SetStartTime gets a reference to the given string and assigns it to the StartTime field.
func (o *ExecutionPipelineExecution) SetStartTime(v string) {
	o.StartTime = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetStatus() string {
	if o == nil || IsNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetStatusOk() (*string, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *ExecutionPipelineExecution) SetStatus(v string) {
	o.Status = &v
}

// GetStepStatus returns the StepStatus field value if set, zero value otherwise.
func (o *ExecutionPipelineExecution) GetStepStatus() map[string]map[string]ExecutionStepStatus {
	if o == nil || IsNil(o.StepStatus) {
		var ret map[string]map[string]ExecutionStepStatus
		return ret
	}
	return *o.StepStatus
}

// GetStepStatusOk returns a tuple with the StepStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ExecutionPipelineExecution) GetStepStatusOk() (*map[string]map[string]ExecutionStepStatus, bool) {
	if o == nil || IsNil(o.StepStatus) {
		return nil, false
	}
	return o.StepStatus, true
}

// HasStepStatus returns a boolean if a field has been set.
func (o *ExecutionPipelineExecution) HasStepStatus() bool {
	if o != nil && !IsNil(o.StepStatus) {
		return true
	}

	return false
}

// SetStepStatus gets a reference to the given map[string]map[string]ExecutionStepStatus and assigns it to the StepStatus field.
func (o *ExecutionPipelineExecution) SetStepStatus(v map[string]map[string]ExecutionStepStatus) {
	o.StepStatus = &v
}

func (o ExecutionPipelineExecution) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ExecutionPipelineExecution) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Args) {
		toSerialize["args"] = o.Args
	}
	if !IsNil(o.EndTime) {
		toSerialize["end_time"] = o.EndTime
	}
	if !IsNil(o.Errors) {
		toSerialize["errors"] = o.Errors
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.ParentExecutionId) {
		toSerialize["parent_execution_id"] = o.ParentExecutionId
	}
	if !IsNil(o.ParentStepExecutionId) {
		toSerialize["parent_step_execution_id"] = o.ParentStepExecutionId
	}
	if !IsNil(o.PipelineOutput) {
		toSerialize["pipeline_output"] = o.PipelineOutput
	}
	if !IsNil(o.StartTime) {
		toSerialize["start_time"] = o.StartTime
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.StepStatus) {
		toSerialize["step_status"] = o.StepStatus
	}
	return toSerialize, nil
}

type NullableExecutionPipelineExecution struct {
	value *ExecutionPipelineExecution
	isSet bool
}

func (v NullableExecutionPipelineExecution) Get() *ExecutionPipelineExecution {
	return v.value
}

func (v *NullableExecutionPipelineExecution) Set(val *ExecutionPipelineExecution) {
	v.value = val
	v.isSet = true
}

func (v NullableExecutionPipelineExecution) IsSet() bool {
	return v.isSet
}

func (v *NullableExecutionPipelineExecution) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableExecutionPipelineExecution(val *ExecutionPipelineExecution) *NullableExecutionPipelineExecution {
	return &NullableExecutionPipelineExecution{value: val, isSet: true}
}

func (v NullableExecutionPipelineExecution) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableExecutionPipelineExecution) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


